#!/usr/bin/env python3# -*- coding: UTF-8 -*-__author__ = "Li Duo"__version__ = "1.0""""5   {"succeed":true,"message":null,"detail":null,"result":{}}4   {"data":{},"isSuccess":true,"resultMsg":""}3   {"data":{},"resultCode":1,"resultMess":""}2   {"data":[],"resultCode":1,"resultMess":""}6   {"resultCode":1}7   {"data":[],"isSuccess":true,"resultMsg":""}"""import itchatimport requestsimport timeimport configparserimport logging, os, sysimport jsonimport xlrdimport xlwt, platformparentPath = os.path.abspath(os.path.join(os.path.dirname(__file__), "."))# 切换到根目录'''/Users/icourt/venv/bin/python /Users/icourt/Desktop/code/automation-master/interface/Interface.py/Users/icourt/Desktop/code/automation-master/interface'''rootPath = os.path.abspath(os.path.join(parentPath, ".."))# 将项目目录添加到sys.pathsys.path.append(parentPath)# 日志模块log_file = os.path.join(os.getcwd(), 'logs.log')log_format = '[%(asctime)s] [%(levelname)s] %(message)s'  # 配置log格式logging.basicConfig(format=log_format, filename=log_file, filemode='w', level=logging.DEBUG)console = logging.StreamHandler()console.setLevel(logging.INFO)formatter = logging.Formatter(log_format)console.setFormatter(formatter)logging.getLogger('').addHandler(console)class Interface():    def __init__(self, config):        logging.info("正在执行基础信息获取")        self.errorflag = 0        self.config = config        self.userinfo, seafiletoken = self.LoginAndBasicInfo()        self.headers = {"Authorization": "Token " + seafiletoken,                        "token": self.userinfo["token"]}        print(self.headers)        self.storage = {"today": str(time.strftime("%Y-%m-%d")), "token": self.userinfo["token"],                        "officeid": self.userinfo["officeId"], "userid": self.userinfo["userId"],                        "now": int(time.time())}        logging.info("基础信息获取完成，开始执行测试用例")    def LoginAndBasicInfo(self):        url = self.config["weburl"] + "ilaw/api/v1/auth/login"        data = {"user": self.config["用户名"], "password": self.config["密码"], "deviceType": "web"}        self.headers = {"Content-Type": "application/json;charset=UTF-8"}        login = requests.post(url, json=data, headers=self.headers)        print(login.json())        url = self.config["weburl"] + "ilaw/api/v2/documents/getToken"        # seafiletoken = "1"        seafileinfo = requests.get(url, headers={"token": login.json()["token"]})        seafiletoken = seafileinfo.json()["authToken"]        print(seafiletoken)        return login.json(), seafiletoken    def Get(self, **para):        number = int(para["runtimes"]) if para["runtimes"] else 1        # data为空为get，否则为post        try:            # if 1 == 1:            interface = para["path"]            newUrl=""            if "$" in para["path"]:                interface = para["path"].split("$")                for i in range(len(interface)):                    if i % 2 == 0:                        if i == (len(interface) - 1):                            newUrl = newUrl + interface[i]                        else:                            newUrl = newUrl + interface[i] + str(eval('self.storage[interface[' + str(i + 1) + ']]'))                interface = newUrl#                url = para["path"].split("$")#               print(url) #               if len(url) == 5:  #                  interface = url[0] + str(eval('self.storage[url[1]]')) + url[2] + str(   #                     eval('self.storage[url[3]]')) + url[4]    #            else:     #               interface = url[0] + str(eval('self.storage[url[1]]')) + url[2]      #          print(interface)            data = para["data"]            newData=""            if "$" in para["data"]:                data = para["data"].split("$")                for i in range(len(data)):                    if i % 2 == 0:                        if i == (len(data) - 1):                            newData = newData + data[i]                        else:                            newData = newData + data[i] + str(eval('self.storage[data[' + str(i + 1) + ']]'))                data = newData                # if len(data) == 3:                #     data = data[0] + str(eval('self.storage[data[1]]')) + data[2]                # elif len(data) == 5:                #     data = data[0] + str(eval('self.storage[data[1]]')) + data[2] +str(eval('self.storage[data[3]]')) + data[4]                # elif len(data) == 7:                #     data = data[0] + str(eval('self.storage[data[1]]')) + data[2] +str(eval('self.storage[data[3]]')) + data[4] \                #     + str(eval('self.storage[data[5]]')) + data[6]                # elif len(data) == 9:                #     data = data[0] + str(eval('self.storage[data[1]]')) + data[2] +str(eval('self.storage[data[3]]')) + data[4] \                #     + str(eval('self.storage[data[5]]')) + data[6] + str(eval('self.storage[data[7]]')) + data[8]                # elif len(data) == 11:                #     data = data[0] + str(eval('self.storage[data[1]]')) + data[2] + str(eval('self.storage[data[3]]')) + \                #            data[4] + str(eval('self.storage[data[5]]')) + data[6] + str(eval('self.storage[data[7]]')) + \                #            data[8] + str(eval('self.storage[data[9]]')) + data[10]            if para["model"] == "文档":                url = self.config["seafileurl"] + interface            # elif para["model"] == "客户端":            #     url = self.config["dosktopurl"] + interface            else:                url = self.config["weburl"] + interface            print(url)            # logging.debug(str(url))            time1 = time.time()            for i in range(number):                if para["method"] == 'GET':                    info = requests.get(url, headers=self.headers)                elif para["method"] == 'POST':                    if para["content_type"] == "data":                        info = requests.post(url, data=json.loads(data), headers=self.headers)                        print(info.text)                    elif para["content_type"] == "multi":                        info = requests.post(url, data=json.loads(data), files={'file': open("xlsx_test.xlsx", 'rb')},                                             headers=self.headers)                    else:                        if data == "":                            info = requests.post(url, headers=self.headers)                        else:                            print("我是data"+data)                            info = requests.post(url, json=json.loads(data), headers=self.headers)                            print(info.text)                elif para["method"] == 'PUT':                    info = requests.put(url, json=json.loads(data), headers=self.headers)                elif para["method"] == "DELETE":                    if data == "":                        info = requests.delete(url, headers=self.headers)                    else:                        info = requests.delete(url, data=json.loads(data), headers=self.headers)                usetime = time.time() - time1                result = self.Myassert(info, para["verifycode"], para['expection'], para['contain'], para['notcontain'])                print(info.text)            if para['save']:                if para['path'] == "ilaw/api/v2/contact/namespair/?name=":                    save1 = eval("info.json()" + para["datapath"])                    self.storage[para['save']] = list(eval("save1.keys()"))[0]                else:                    self.storage[para['save']] = str(eval("info.json()" + para["datapath"]))                    print(self.storage)                    # logging.info("请求地址："+ url + '\n'+ "请求数据："+data+"\n"+"返回结果："+info.text+"\n")            return url, info.text, usetime, result        except:            logging.error(interface + " 接口错误")            return "错误", "错误", "错误", False            self.errorflag += 1    def Myassert(self, info, verifycode, expection='', contain='', notin=""):        try:            assert info.status_code == 200            # print(info.text)            if verifycode == 1:                pass                # logging.debug(str(info.json()))            elif verifycode == 5:                # logging.debug(str(info.text))                assert info.json()["succeed"] == True                assert type(info.json()["result"]) == dict            # except:            elif verifycode == 4:                assert info.json()["isSuccess"] == True                assert type(info.json()["data"]) == dict            elif verifycode == 7:                assert info.json()["isSuccess"] == True                assert type(info.json()["data"]) == list            elif verifycode == 3:                assert info.json()["resultCode"] == 1                assert type(info.json()["data"]) == dict            elif verifycode == 2:                assert info.json()["resultCode"] == 1                assert type(info.json()["data"]) == list            elif verifycode == 6:                # logging.debug(str(info.text))                assert info.json()["succeed"] == True                assert type(info.json()["result"]) == str            if expection:                assert info.text == expection            if contain:                containstr = contain.split(",")                for i in containstr:                    assert i in info.text            if notin:                containstr = contain.split(",")                for i in containstr:                    assert i not in info.text            return True        except:            return Falsedef Getconfig():    environment = \        {            "test": ["https://test.alphalawyer.cn/", 'https://testbox.alphalawyer.cn/', "https://test.alphalawyer.cn/"],            "pre": ["https://pre.alphalawyer.cn/", 'https://prebox.alphalawyer.cn/', "https://pre.alphalawyer.cn/"],            "online": ["https://alphalawyer.cn/", 'https://box.alphalawyer.cn/', "https://alphalawyer.cn/"]        }    # 读取配置文件，需与py文件位于同一层    configs = configparser.ConfigParser()    configs.read("Config.ini")    logging.info("读取配置文件成功")    config = {}    config["环境"] = configs.get("ENV", "base")    config["用户名"] = configs.get("ENV", "Username")    config["密码"] = configs.get("ENV", "Password")    config["用例地址"] = configs.get("ENV", "Case")    config["执行次数"] = configs.get("ENV", "Runtimes")    config["weburl"] = environment[config["环境"]][2]    config["seafileurl"] = environment[config["环境"]][1]    config["dosktopurl"] = environment[config["环境"]][2]    print(config)    if len(config) == 8:        logging.info("配置完成", config)        for i in config.keys():            logging.info(i + ' : ' + config[i])        caselist = GetCaseList(config["用例地址"])        return config, caselist    else:        logging.error("部分配置项缺失，可能导致结果异常")        return config    # except:    # logging.error("配置出错")def GetCaseList(fileName):    readExcel = xlrd.open_workbook(fileName)  # 读取指定的Excel    table = readExcel.sheet_by_index(1)  # 获取Excel的第一个sheet    trows = table.nrows  # 获取Excel的行数    caseList = []    for n in range(1, trows):  # 去除第一行标题行        if table.cell(n, 0).value == '' or table.cell(n, 0).value == 'N' \                or table.cell(n, 2).value == '':            pass        else:            tmpdict = {}  # 把一行记录写进一个{}            tmpdict['id'] = n  # n是Excel中的第n行            tmpdict['Runflag'] = table.cell(n, 0).value            tmpdict['title'] = table.cell(n, 1).value            tmpdict['path'] = table.cell(n, 2).value            tmpdict['model'] = table.cell(n, 3).value            tmpdict['verifycode'] = table.cell(n, 4).value            tmpdict['method'] = table.cell(n, 5).value            tmpdict['data'] = table.cell(n, 6).value            tmpdict['expection'] = table.cell(n, 7).value            tmpdict['save'] = table.cell(n, 9).value            tmpdict['contain'] = table.cell(n, 8).value            tmpdict['datapath'] = table.cell(n, 10).value            tmpdict['content_type'] = table.cell(n, 11).value            tmpdict['runtimes'] = table.cell(n, 12).value            tmpdict['notcontain'] = table.cell(n, 13).value            caseList.append(tmpdict)    logging.info("读取用例：" + str(trows - 1) + "，即将执行：" + str(len(caseList)))    # readExcel.close()    return caseList    # except:    #     logging.error("打开execl文件出错")def Start():    config, caselist = Getconfig()    if config and caselist:        interface = Interface(config)        workbook = xlwt.Workbook(encoding='utf-8')        data_sheet = workbook.add_sheet('接口测试结果')        row0 = ['是否通过', u'模块', "标题", u"地址", "运行时间", '实际', "期望"]        z = 1        for x in range(len(row0)):            data_sheet.write(0, x, row0[x])        # try:        # for i in range(int(config["执行次数"])):        for i in caselist:            try:                url, response, usetime, result = interface.Get(**i)            except:                pass            # if 1:            # url,info,usetime,result = interface.Get(i["path"],i["verify"],i["data"],i["equal"],i["contain"],i["method"],i['save'],i["left"] ,i["right"])            data_sheet.write(z, 1, str(i["model"]))            data_sheet.write(z, 3, str(url))            data_sheet.write(z, 2, str(i["title"]))            data_sheet.write(z, 4, str(usetime)[0:4])            if result == False:                data_sheet.write(z, 5, str(response))            data_sheet.write(z, 0, str(result))            # data_sheet.write(z, 6, str(i["expection"]))            # print(info.json())            z += 1        reportName = config["环境"] + "-" + str(time.strftime("%Y-%m-%d-%H-%M")) + '.xls'        workbook.save(reportName)        # 发送测试结果到微信        '''        itchat.auto_login(True)        chatroomName = "自动化测试结果"        chatrooms = itchat.search_chatrooms(name=chatroomName)        userName = chatrooms[0]['UserName']        if 'Windows' in platform.system():            reportName = parentPath + "\\" + reportName        else:            reportName = parentPath + "/" + reportName        r = itchat.send_file(reportName,                             toUserName=userName)        print(r)        # except:        # pass        logging.info("执行完成，总用例：" + str(len(caselist)))'''if __name__ == "__main__":    Start()