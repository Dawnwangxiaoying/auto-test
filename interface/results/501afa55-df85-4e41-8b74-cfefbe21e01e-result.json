{"name": "test_a[case9]", "status": "broken", "statusDetails": {"message": "TypeError: the JSON object must be str, bytes or bytearray, not list", "trace": "self = <interface.case.test_interface.TestClass object at 0x1030d05f8>\ncase = {'Runflag': 'Y', 'contain': '成功', 'contentType': 'json', 'data': '{\"attach\":\"哈哈\",\"roomid\":\"$roomid$\",\"msgType\":1,\"ext\":\"{\\\\\"role\\\\\":0}\",\"msgId\":\"$msgId$\"}', ...}\n\n    def test_a(self, case):\n        allure.description(case[\"title\"])\n        r = \"\"\n        url = getUrl(case[\"path\"], case[\"model\"], self.storage, r, case)\n        print(url)\n        data = getData(case[\"data\"], self.storage, r, case)\n        print(data)\n        with allure.step(\"发送请求\"):\n            allure.attach(\"请求方式\", case[\"method\"])\n            allure.attach('url', str(url))\n            allure.attach('data', str(data))\n        # try:\n        headers = self.headers\n>       r = request(case, url, data, headers)\n\ntest_interface.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common/baseCase.py:148: in request\n    r = requests.post(url, json=json.loads(data), headers=headers)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = ['{\"attach\":\"哈哈\",\"roomid\":\"', 'roomid', '\",\"msgType\":1,\"ext\":\"{\\\\\"role\\\\\":0}\",\"msgId\":\"', 'msgId', '\"}']\nencoding = None, cls = None, object_hook = None, parse_float = None\nparse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not list\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py:341: TypeError"}, "steps": [{"name": "发送请求", "status": "passed", "attachments": [{"name": "POST", "source": "6ac70fe6-f9d6-4a99-a5e4-21dc1e41cde4-attachment.attach"}, {"name": "https://testschool.icourt.cc/live/api/v1/im/chatroom/savemsg", "source": "f04fa78e-aa97-4f75-b322-fcc699e203b1-attachment.attach"}, {"name": "['{\"attach\":\"哈哈\",\"roomid\":\"', 'roomid', '\",\"msgType\":1,\"ext\":\"{\\\\\"role\\\\\":0}\",\"msgId\":\"', 'msgId', '\"}']", "source": "15bef2d1-8c94-4687-aab1-0aa2ce4ce50b-attachment.attach"}], "start": 1542619531359, "stop": 1542619531361}], "attachments": [{"name": "log", "source": "9289cf2d-e44c-4e01-be1f-7b873f98c7fd-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "931db1e3-30da-4d17-8fae-fbb7827b6386-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "b1485bb8-b210-49ee-9f28-ea449206e4d6-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'id': 726, 'Runflag': 'Y', 'title': '发送评论', 'path': 'live/api/v1/im/chatroom/savemsg', 'model': '法学院', 'verifycode': '', 'method': 'POST', 'data': '{\"attach\":\"哈哈\",\"roomid\":\"$roomid$\",\"msgType\":1,\"ext\":\"{\\\\\"role\\\\\":0}\",\"msgId\":\"$msgId$\"}', 'filePath': '', 'expection': '', 'save': '', 'contain': '成功', 'datapath': '', 'contentType': 'json', 'out': ''}"}], "start": 1542619531358, "stop": 1542619531361, "uuid": "b8d25782-e6fe-4a7f-81a4-54d338dd4490", "historyId": "36895c69e3755027d8055b6cc3b9e631", "fullName": "test_interface.TestClass#test_a[case9]"}